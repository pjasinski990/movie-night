version: '3.8'
services:
  movie_night_frontend:
    build:
      context: ./frontend
      dockerfile: ${DOCKERFILE:-Dockerfile.dev}
    ports:
      - "81:80"
      - "444:443"
      - "5173:5173"
    environment:
      - NODE_ENV=${ENV:-development}
      - BACKEND_PORT=5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - movie_night_backend
    networks:
      - movie-night-network

  movie_night_backend:
    build:
      context: ./backend
      dockerfile: ${DOCKERFILE:-Dockerfile.dev}
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=${ENV:-development}
      - PORT=5000
      - MYSQL_HOST=movie_night_mysql
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_NOTIFICATION_TO=${EMAIL_NOTIFICATION_TO}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      movie_night_mysql:
        condition: service_healthy
    networks:
      - movie-night-network

  movie_night_mysql:
    image: mysql:8.0
    container_name: movie_night_mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "movie_night_mysql", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      timeout: 20s
      retries: 10
    networks:
      - movie-night-network

volumes:
  mysql_data:

networks:
  movie-night-network:
    driver: bridge
